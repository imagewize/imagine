name: Create plugin release

on:
  release:
    types: [published, edited]
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Build
      run: yarn build
      
    - name: Ensure asset PHP file exists
      run: |
        mkdir -p dist
        if [ "${{ hashFiles('dist/imagine-editor.asset.php') }}" == "" ]; then
          echo "Creating dist/imagine-editor.asset.php file"
          echo '<?php' > dist/imagine-editor.asset.php
          echo 'return array(' >> dist/imagine-editor.asset.php
          echo "    'dependencies' => array(" >> dist/imagine-editor.asset.php
          echo "        'wp-element'," >> dist/imagine-editor.asset.php
          echo "        'wp-components'," >> dist/imagine-editor.asset.php
          echo "        'wp-blocks'," >> dist/imagine-editor.asset.php
          echo "        'wp-i18n'," >> dist/imagine-editor.asset.php
          echo "        'wp-api-fetch'," >> dist/imagine-editor.asset.php
          echo "        'wp-editor'" >> dist/imagine-editor.asset.php
          echo "    )," >> dist/imagine-editor.asset.php
          echo "    'version' => '1.0.0'" >> dist/imagine-editor.asset.php
          echo ");" >> dist/imagine-editor.asset.php
          echo "Created asset file successfully"
        else
          echo "dist/imagine-editor.asset.php already exists"
        fi

    - name: Verify assets directory structure
      run: |
        echo "Checking directory structure..."
        mkdir -p dist/assets
        echo "Contents of dist directory:"
        ls -la dist
        echo "Contents of dist/assets directory (if exists):"
        ls -la dist/assets || echo "dist/assets is empty or doesn't exist"

    - name: Create placeholder assets if needed
      run: |
        # Create placeholder JS file if it doesn't exist
        if [ ! -f "dist/assets/imagine-editor.js" ]; then
          echo "Creating placeholder JS file"
          mkdir -p dist/assets
          echo "console.log('Imagine Page Builder Editor');" > dist/assets/imagine-editor.js
        fi
        
        # Create placeholder CSS file if it doesn't exist
        if [ ! -f "dist/assets/imagine-editor.css" ]; then
          echo "Creating placeholder CSS file"
          mkdir -p dist/assets
          echo "/* Imagine Page Builder Editor styles */" > dist/assets/imagine-editor.css
        fi

    - name: Create plugin directory
      run: |
        mkdir -p imagine-page-builder
        cp -r dist imagine-page-builder/
        cp -r includes imagine-page-builder/
        cp imagine-page-builder.php imagine-page-builder/
        cp README.md imagine-page-builder/
        
        # Copy LICENSE file if it exists
        if [ -f LICENSE ]; then
          cp LICENSE imagine-page-builder/
        else
          echo "No LICENSE file found, skipping..."
        fi
        
        # List the contents to verify packaging
        echo "Plugin directory structure:"
        find imagine-page-builder -type f | sort
      
    - name: Zip plugin
      run: zip -r imagine-page-builder.zip imagine-page-builder

    - name: Debug tag/release info
      run: |
        echo "Current tag: ${GITHUB_REF#refs/tags/}"
        echo "Event name: ${{ github.event_name }}"
        echo "Checking if release exists..."
        release_url="https://api.github.com/repos/${{ github.repository }}/releases/tags/${GITHUB_REF#refs/tags/}"
        status_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $release_url)
        echo "Release API response code: $status_code"
        
        if [ "$status_code" = "200" ]; then
          echo "Release already exists"
        else
          echo "Release needs to be created"
        fi

    # Create a release if we're pushing a tag and the release doesn't exist
    - name: Create GitHub Release
      id: create_release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          Imagine Page Builder ${{ github.ref_name }}
          
          This release was automatically generated from tag ${{ github.ref_name }}
    
    # Upload the asset to the newly created release
    - name: Upload Release Asset (Push Event)
      if: github.event_name == 'push'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./imagine-page-builder.zip
        asset_name: imagine-page-builder.zip
        asset_content_type: application/zip

    # This is for existing releases (published, edited)
    - name: Upload Release Asset (Release Event)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./imagine-page-builder.zip
        asset_name: imagine-page-builder.zip
        asset_content_type: application/zip
