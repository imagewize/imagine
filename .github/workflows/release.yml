name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Build
      run: yarn build
      
    - name: Package plugin
      run: |
        mkdir -p imagine-page-builder
        cp -r dist imagine-page-builder/
        cp -r includes imagine-page-builder/
        cp imagine-page-builder.php imagine-page-builder/
        cp README.md imagine-page-builder/
        
        # Copy LICENSE file if it exists
        if [ -f LICENSE ]; then
          cp LICENSE imagine-page-builder/
        else
          echo "No LICENSE file found, skipping..."
        fi
        
        zip -r imagine-page-builder.zip imagine-page-builder

    - name: Extract tag name
      id: tag
      run: echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Check if release exists
      id: check_release
      run: |
        RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.tag.outputs.name }})
        if [ "$RELEASE_EXISTS" == "200" ]; then
          echo "Release already exists, skipping release creation"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Release does not exist"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Create Release
      id: create_release
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.name }}
        release_name: Release ${{ steps.tag.outputs.name }}
        draft: false
        prerelease: false
    
    - name: Get release upload URL
      id: get_upload_url
      if: steps.check_release.outputs.exists == 'true'
      run: |
        UPLOAD_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.tag.outputs.name }} | jq -r .upload_url)
        echo "url=${UPLOAD_URL}" >> $GITHUB_OUTPUT
        
    - name: Upload Release Asset (new release)
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./imagine-page-builder.zip
        asset_name: imagine-page-builder.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (existing release)
      if: steps.check_release.outputs.exists == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.url }}
        asset_path: ./imagine-page-builder.zip
        asset_name: imagine-page-builder.zip
        asset_content_type: application/zip
